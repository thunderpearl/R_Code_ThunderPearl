list_data["A_Matrix"]
list_data["A_Matrix"][1,1]
list_data["A_Matrix"][1]
list_data["A_Matrix"]
list_data["A_Matrix"][2,2]
list_data["A_Matrix"][,]
class(list_data["A_Matrix"])
class(as.matrix(list_data["A_Matrix"]))
library(MASS)
head(Cars93)
str(Cars93)
my_cars <- Cars93
my_data_table1 <- table(my_cars$Type,my_cars$AirBags)
print(my_data_table1)
my_chi1 <- chisq.test(my_data_table1)
print(my_chi1)
my_data_frame1 <- data.frame(my_cars$Type, my_cars$AirBags)
my_data_frame1
class(as.matrix(list_data["A_Matrix"]))
as.matrix(list_data["A_Matrix"])
list_data["A_Matrix"]
install.packages("survival")
library(survival)
my_rainfall <- c(919,1274.9,799.1,1235.6,653.5,857.5,745.5,846.6,884.2,795,982.8,1301)
my_rainfall_ts <- ts(my_rainfall,start = c(2018,1), frequency = 12)
print(my_rainfall
print(my_rainfall)
print(my_rainfall_ts)
plot(my_rainfall_ts)
my_rainfall_ts2 <- ts(my_rainfall,start = c(2018,1), frequency = 4)
plot(my_rainfall_ts2)
?ts
my_data_frame1 <- data.frame(my_cars$Type, my_cars$AirBags)
class(my_data_frame1)
print(my_data_frame1)
my_data_table1 <- table(my_cars$Type,my_cars$AirBags)
print(my_data_table1)
my_chi1 <- chisq.test(my_data_table1)
print(my_chi1)
?ts
my_data_table1[,]
my_data_table1[,1]
sum(my_data_table1[,1])
i
pie(my_salary1,my_labels)
my_salary1 <- c(20000,10000,35000,43000,5000,34000)
my_labels <- c("A","B","C","D","E","F")
pie(my_salary1,my_labels)
my_colors <- c(rainbow(6))
pie(my_salary1,my_labels,col = my_colors)
pie(my_salary1,my_labels)
?pie
pie(my_salary1,my_labels,col = my_colors)
pie(my_salary1,my_labels,col = my_colors, border = "yellow")
pie(my_salary1,my_labels,col = my_colors, border = "yellow",lty = 3)
pie(my_salary1,my_labels,col = my_colors, border = "yellow",lty = 4)
pie(my_salary1,my_labels,col = my_colors, border = "yellow",lty = 40)
pie(my_salary1,my_labels,col = my_colors, border = "yellow",lty = 0.2)
pie(my_salary1,my_labels,col = my_colors, border = "yellow",lty = 100)
pie(my_salary1,my_labels,col = my_colors, border = "yellow",lty = 100,angle = 90)
pie(my_salary1,my_labels,col = my_colors, border = "yellow",lty = 100)
pie(my_salary1,my_labels,col = my_colors, border = "yellow",lty = 100,density = 40)
pie(my_salary1,my_labels,col = my_colors, border = "yellow",lty = 100,density = 200)
pie(my_salary1,my_labels,col = my_colors, border = "yellow",lty = 100,density = -40)
pie(my_salary1,my_labels,col = my_colors, border = "yellow",lty = 100,density = 400)
pie3D(my_salary1,my_labels,col = my_colors, border = "yellow",lty = 100,density = 40)
library(plotrix)
source('D:/Programming/R Programming/R_Scripts/Pie_chart1.R', echo=TRUE)
install.packages("plotrix")
install.packages("plotrix")
install.packages("plotrix")
library(plotrix)
pie3D(my_salary1,my_labels,col = my_colors, border = "yellow",lty = 100,density = 40)
pie3D(my_salary1,my_labels,col = my_colors, explode = 0.3)
pie3D(my_salary1,labels = my_labels,col = my_colors, explode = 0.3)
pie3D(my_salary1,labels = my_labels,col = my_colors, explode = 0.1)
pie3D(my_salary1,labels = my_labels,col = my_colors, explode = 0.05)
pie3D(my_salary1,labels = my_labels,col = my_colors, explode = 0.05,theta = 45)
pie3D(my_salary1,labels = my_labels,col = my_colors, explode = 0.05,theta = 10)
ls()
library(ggplot2)
ggplot(diamonds,aes(depth, price)) + geom_point()
plot(diamonds$depth, diamonds$price)
plot(diamonds$depth, diamonds$price, col = diamonds$carat)
head(diamonds)
cor(diamonds$depth,diamonds$table,diamonds$price)
?cor
cor(iris$Sepal.Length,iris$Sepal.Width,iris$Petal.Length,iris$Petal.Width)
my_iris <- iris
my_iris$Species <- NULL
my_iris
cor(my_iris)
corrplot(my_iris)
rattle
rattle()
install.packages("corrplot")
library(corrplot)
cor(my_iris)
corrplot(my_iris)
?corrplot
my_correlation <- cor(my_iris)
corrplot(my_correlation)
my_lm1 <- lm(my_iris$Petal.Width~my_iris$Sepal.Length)
summary(my_lm1)
my_lm1 <- lm(my_iris$Petal.Width~my_iris$Petal.Length)
summary(my_lm1)
my_lm1 <- lm(my_iris$Sepal.Length~my_iris$Petal.Width+my_iris$Petal.Length)
summary(my_lm1)
library(survival)
lung
my_lung_data <- lung
re_adjusted_status <- function(x){
if(x==1){rs=0}
if(x==2){rs=1}
return(rs)
}
# creating a new column
for(x in 1:length(my_lung_data$status)){
my_lung_data$re_adjust_status <- re_adjusted_status(my_lung_data[x])
}
# creating a new column
for(x in 1:length(my_lung_data$status)){
my_lung_data$re_adjust_status <- re_adjusted_status(my_lung_data$status[x])
}
head(my_lung_data)
my_lung_data
re_adjusted_status <- function(x){
if(x==1){rs=0}
if(x==2){rs=1}
return(rs)
}
for(x in 1:length(my_lung_data$status)){
my_lung_data$re_adjust_status <- re_adjusted_status(my_lung_data$status[x])
}
head(my_lung_data)
for(x in 1:length(my_lung_data$status)){
my_lung_data$re_adjust_status[x] <- re_adjusted_status(my_lung_data$status[x])
}
head(my_lung_data)
my_surv_object <- Surv(time = my_lung_data$time,event = my_lung_data$status)
class(my_lung_data)
head(my_surv_object)
my_surv_object
class(my_surv_object)
head(my_lung_data$time)
my_curve_fit <- survfit(my_surv_object~1)
my_curve_fit
median(my_lung_data$time)
plot(my_curve_fit)
plot(my_curve_fit,conf.int = "none")
abline(v=0.5)
abline(h=310)
plot(my_curve_fit,conf.int = "none")
abline(v=0.5)
abline(h=310)
plot(my_curve_fit,conf.int = "none")
plot(my_curve_fit)
plot(my_curve_fit)
library(survival)
my_lung_data <- lung
re_adjusted_status <- function(x){
if(x==1){rs=0}
if(x==2){rs=1}
return(rs)
}
for(x in 1:length(my_lung_data$status)){
my_lung_data$re_adjust_status[x] <- re_adjusted_status(my_lung_data$status[x])
}
head(my_lung_data)
my_lung_data
my_surv_object <- Surv(time = my_lung_data$time,event = my_lung_data$status)
class(my_surv_object)
my_surv_object
head(my_surv_object)
my_curve_fit <- survfit(my_surv_object~1)
my_curve_fit
median(my_lung_data$time)
plot(my_curve_fit)
library(survival)
my_lung_data <- lung
re_adjusted_status <- function(x){
if(x==1){rs=0}
if(x==2){rs=1}
return(rs)
}
# creating a new column
for(x in 1:length(my_lung_data$status)){
my_lung_data$re_adjust_status[x] <- re_adjusted_status(my_lung_data$status[x])
}
head(my_lung_data)
my_lung_data
my_surv_object <- Surv(time = my_lung_data$time,event = my_lung_data$status)
class(my_surv_object)
# Printing the surv object compeletely
my_surv_object
# Printing the head of the my_surv_object
head(my_surv_object)
# plotting kaplan meier curve with single line only....
my_curve_fit <- survfit(my_surv_object~1)
# This will give lots of data
my_curve_fit
# median of time
# median of time and above median are not same ....
# above median is something else
median(my_lung_data$time)
# median survival time is the time at which survivorship function is 0.5
plot(my_curve_fit)
# We dont want to plot lower and upper confidence....
plot(my_curve_fit,conf.int = "none")
# To see the median of the curve at which survivorshipt function will be 0.5
abline(v=0.5)
abline(h=310)
# To see the median of the curve at which survivorshipt function will be 0.5
abline(h=0.5)
abline(v=310)
library(ggplot2)
my_surv_object <- Surv(time = my_lung_data$time,event = my_lung_data$re_adjust_status)
class(my_surv_object)
# Printing the surv object compeletely
my_surv_object
# Printing the head of the my_surv_object
head(my_surv_object)
# plotting kaplan meier curve with single line only....
my_curve_fit <- survfit(my_surv_object~1)
# This will give lots of data
my_curve_fit
# median of time
# median of time and above median are not same ....
# above median is something else
median(my_lung_data$time)
# median survival time is the time at which survivorship function is 0.5
plot(my_curve_fit)
# We dont want to plot lower and upper confidence....
plot(my_curve_fit,conf.int = "none")
# To see the median of the curve at which survivorshipt function will be 0.5
abline(h=0.5)
abline(v=310)
my_curve_fit_gender <- survfit(my_surv_object~my_lung_data$sex)
my_curve_fit_gender
str(my_lung_data)
length(which(my_lung_data$status==1))
# We dont want to plot lower and upper confidence....
plot(my_curve_fit,conf.int = "none", main = "Kaplan Mier Curve", ylab = "SurvivorShip")
# To see the median of the curve at which survivorshipt function will be 0.5
abline(h=0.5)
abline(v=310)
my_curve_fit_gender <- survfit(my_surv_object~my_lung_data$sex)
my_curve_fit_gender
head(my_lung_data)
plot(my_curve_fit_gender)
# For seperately identifying the Kaplan Mier Curve for Gender
plot(my_curve_fit_gender, col = c("green","blue"))
plot(my_curve_fit_gender, col = c("green","blue"),conf.int = "both")
plot(my_curve_fit_gender, col = c("green","blue"),mark.time = T)
legend("topright", c("MALE","FEMALE"), col = c("green","blue"))
legend("topright", c("MALE","FEMALE"), col = c("green","blue"),lty = 1)
# lty is used for bringing lines in front of legend....
legend("topright", c("MALE","FEMALE"), col = c("green","blue"),lty = 1)
abline(h=0.5)
abline(v=270)
abline(v=426)
# lty is used for bringing lines in front of legend....
legend("topright", c("MALE","FEMALE"), col = c("green","blue"),lty = 1)
abline(h=0.5)
abline(v=270, col = "green")
abline(v=426, col="blue")
# Performing Logrank Text to test the statistical difference between the two genders....
survdiff(my_surv_object~my_lung_data$sex)
# inverse of the curve can also be plotted
plot(my_curve_fit_gender, col = c("green","blue"),mark.time = T, fun = "event")
install.packages("car",dependencies = TRUE)
install.packages("flexsurv",dependencies = TRUE)
install.packages("KMsurv",dependencies = TRUE)
install.packages("e1071",dependencies = TRUE)
install.packages("res",dependencies = TRUE)
install.packages("survival",dependencies = TRUE)
install.packages("survival", dependencies = TRUE)
install.packages("car",dependencies = TRUE)
install.packages("flexsurv",dependencies = TRUE)
install.packages("KMsurv",dependencies = TRUE)
install.packages("e1071",dependencies = TRUE)
install.packages("res",dependencies = TRUE)
install.packages("survival",dependencies = TRUE)
# Lets load the packages into the memory
library(car)
library(flexsurv)
library(KMsurv)
library(e1071)
library(res)
library(survival)
install.packages("car",dependencies = TRUE)
install.packages("flexsurv",dependencies = TRUE)
install.packages("KMsurv",dependencies = TRUE)
install.packages("e1071",dependencies = TRUE)
install.packages("res",dependencies = TRUE)
install.packages("car", dependencies = TRUE)
install.packages("car",dependencies = TRUE)
install.packages("flexsurv",dependencies = TRUE)
install.packages("KMsurv",dependencies = TRUE)
install.packages("e1071",dependencies = TRUE)
install.packages("res",dependencies = TRUE)
install.packages("survival",dependencies = TRUE)
library(car)
library(flexsurv)
library(KMsurv)
library(e1071)
library(res)
library(survival)
my_lung_data <- lung
head(my_lung_data)
?subset()
iris
my_data_frame1 <- subset(iris, Species=="versicolor")
head(my_data_frame1)
# To do survival analysis we have to install a package called survival
# install.packages("survival")
library(survival)
my_lung_data <- lung
re_adjusted_status <- function(x){
if(x==1){rs=0}
if(x==2){rs=1}
return(rs)
}
# creating a new column
for(x in 1:length(my_lung_data$status)){
my_lung_data$re_adjust_status[x] <- re_adjusted_status(my_lung_data$status[x])
}
head(my_lung_data)
my_lung_data
my_surv_object <- Surv(time = my_lung_data$time,event = my_lung_data$re_adjust_status)
class(my_surv_object)
# Printing the surv object compeletely
my_surv_object
# Printing the head of the my_surv_object
head(my_surv_object)
# plotting kaplan meier curve with single line only....
# 1 signifies tha single curve will be used for all patients in the dataset
my_curve_fit <- survfit(my_surv_object~1)
# This will give lots of data
my_curve_fit
# median of time
# median of time and above median are not same ....
# above median is something else
median(my_lung_data$time)
# Lets see what above median is
# median survival time is the time at which survivorship function is 0.5
plot(my_curve_fit)
# We dont want to plot lower and upper confidence....
plot(my_curve_fit,conf.int = "none", main = "Kaplan Mier Curve", ylab = "SurvivorShip")
# To see the median of the curve at which survivorshipt function will be 0.5
abline(h=0.5)
abline(v=310)
abline(v=285)
abline(v=363)
my_curve_fit_gender <- survfit(my_surv_object~my_lung_data$sex)
my_curve_fit_gender
plot(my_curve_fit_gender)
# For seperately identifying the Kaplan Mier Curve for Gender
plot(my_curve_fit_gender, col = c("green","blue"))
plot(my_curve_fit_gender, col = c("green","blue"),conf.int = "both")
# Tick marks for all the censoring....
plot(my_curve_fit_gender, col = c("green","blue"),mark.time = T)
# lty is used for bringing lines in front of legend....
legend("topright", c("MALE","FEMALE"), col = c("green","blue"),lty = 1)
abline(h=0.5)
abline(v=270, col = "green")
abline(v=426, col="blue")
# Performing Logrank Test to test the statistical difference between the two genders....
survdiff(my_surv_object~my_lung_data$sex)
# p value is very less than .05 hence there is statistical difference
# Also the chi square value is very much too
# We can see the chi square table of degree of freedom and p value
# inverse of the curve can also be plotted
plot(my_curve_fit_gender, col = c("green","blue"),mark.time = T, fun = "event")
ceil(2.3)
install.packages("rhdfs")
install.packages("RHadoop")
install.packages(c("rJava", "Rcpp", "RJSONIO", "bitops", "digest",
"functional", "stringr", "plyr", "reshape2", "dplyr",
"R.methodsS3", "caTools", "Hmisc"))
install.packages
install.packages("data.table")
install.packages("D:\\Hadoop\\Revolutionary_Analitiks\\RHadoop.wiki\\dev\\rhdfs")
install.packages("neuralnet")
library(neuralnet)
set.seed(341)
head(Boston)
library(MASS)
head(Boston)
str(Boston)
dim(Boston)
names(Boston)
class(Boston)
# To get the information about the Boston dataset
help("Boston")
?Boston
my_boston_df <- Boston
head(my_boston_df)
hist(my_boston_df$medv)
set.seed(3)
vector2 <- sample(100,40)
matrix2 <- matrix(vector2, nrow = 5)
matrix2
matrix2 <- matrix(vector2, ncol = 5)
matrix2
max_apply <- apply(matrix2, 1, max)
max_apply
min_apply <- apply(matrix2,2,max)
min_apply
my_char_vec1 <- c("hello","people","how","are","you?")
char_count1 <- lapply(my_char_vec1,nchar)
char_count1
# lapply works on the columns by default....
max_lapply <- lapply(matrix2, max)
max_lapply
max2_lapply_df <- lapply(data.frame(matrix2), max)
max2_lapply_df
my_iris'
max2_lapply_df <- lapply(data.frame(matrix2), max)
max2_lapply_df
# Let's try this on the iris dataset
'
max2_lapply_df <- lapply(data.frame(matrix2), max)
max2_lapply_df
;
# lapply works on the columns by default....
# This will work on the every element of the matrix....
max_lapply <- lapply(matrix2, max)
# lapply works on the columns by default....
# This will work on the every element of the matrix....
max_lapply <- lapply(matrix2, max)
set.seed(3)
vector2 <- sample(100,40)
matrix2 <- matrix(vector2, ncol = 5)
matrix2
max_apply <- apply(matrix2, 1, max)
max_apply
min_apply <- apply(matrix2,2,max)
min_apply
my_char_vec1 <- c("hello","people","how","are","you?")
char_count1 <- lapply(my_char_vec1,nchar)
char_count1
# lapply works on the columns by default....
# This will work on the every element of the matrix....
max_lapply <- lapply(matrix2, max)
max_lapply
max2_lapply_df <- lapply(data.frame(matrix2), max)
max2_lapply_df
# Let's try this on the iris dataset
head(my_iris)
# Let's try this on the iris dataset
my_iris_test <- iris
head(my_iris_test)
result_tapply <- tapply(my_iris_test, Species, sum)
result_tapply <- tapply(my_iris_test, my_iris_test$Species, sum)
result_tapply <- tapply(my_iris_test$Sepal.Length, my_iris_test$Species, sum)
result_tapply
my_gre_data <- read.csv("binary.csv")
setwd("D:/Programming/R Programming/R_Scripts")
my_gre_data <- read.csv("binary.csv")
head(my_gre_data)
str(my_gre_data)
# trying the histogram of data's gre column
hist(my_gre_data$gre)'
# Brining the data in between the range of 0 and 1
data$gre <- (data$gre - min(data$gre))/(max(data$gre) - min(data$gre))
# trying the histogram of data's gre column
hist(my_gre_data$gre)
# Brining the data in between the range of 0 and 1
data$gre <- (data$gre - min(data$gre))/(max(data$gre) - min(data$gre))
# Brining the data in between the range of 0 and 1
my_gre_data$gre <- (my_gre_data$gre - min(my_gre_data$gre))/(max(my_gre_data$gre) - min(my_gre_data$gre))
hist(my_gre_data)
hist(my_gre_data$gre)
my_gre_data$gpa <- (my_gre_data$gpa - min(my_gre_data$gpa))/(max(my_gre_data$gpa) - min(my_gre_data$gpa))
my_gre_data$rank <- (my_gre_data$rank - min(my_gre_data$rank))/(max(my_gre_data$rank) - min(my_gre_data$rank))
my_gre_data
my_ran <- sample(400,300)
my_ran
my_train_data <- my_gre_data[my_ran,]
dim(my_train_data)
head(my_tr)
head(my_train_data)
my_test_data <- my_gre_data[-my_ran,]
dim(my_ran)
dim(my_test_data)
head(my_test_data)
# For neural network we will be using a library called neuralnet
library(neuralnet)
set.seed(4321)
my_n_net1 <- neuralnet(admit~gre+gpa+rank, data = my_train_data, hidden = 1, err.fct = "ce",
linear.output = FALSE)
my_n_net1
# Let's plot our neural network
plot(my_n_net1)
my_n_net2 <- neuralnet(admit~gre+gpa+rank, data = my_train_data, hidden = 1, err.fct = "ce",
linear.output = FALSE)
my_n_net2
# Let's plot our neural network
plot(my_n_net2)
my_n_net2 <- neuralnet(admit~gre+gpa+rank, data = my_train_data, hidden = 2, err.fct = "ce",
linear.output = FALSE)
my_n_net2
# Let's plot our neural network
plot(my_n_net2)
my_n_net3 <- neuralnet(admit~gre+gpa+rank, data = my_train_data, hidden = 3, err.fct = "ce",
linear.output = FALSE)
my_n_net3
# Let's plot our neural network
plot(my_n_net3)
# Let's plot our neural network
plot(my_n_net1)
